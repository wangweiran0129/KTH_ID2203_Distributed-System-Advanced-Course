{"paragraphs":[{"text":"%md\n\n### Ballot Leader Election\n\nIn this programming assignment you will have to complete the implementation of a special Leader Election Algorithm with monotonically increasing ballots.\n\nWhen you are done you simply have to export your notebook and then upload it in the \"Programming Exercise 1\" page.\n\n**Things to Remember**:\n1. Basic components such as `PerfectLink` are already provided. No need to implement them.\n2. Execute the imports defined below **before** compiling your component implementations.\n3. We recommend making use of the component state and internal messages we have provided, if any, to complete the implementation logic.\n4. You can always print messages to the output log, from within handlers to see what happens during the simulation. e.g. `println(s\"Process $self delivers message $msg\");`\n5. Remember that during the simulation check you can print and observe the simulation time, i.e. with `System.currentTimeMillis()`.\n5. Do not forget to run the checker code block after each component implementation to ensure that all properties are satisfied **before** exporting and submitting the notebook.\n6. You can always restart the Kompics Interpreter to start fresh (Interpreter→KompicsInterpreter→Click Restart)\n\nGood luck! :)","user":"anonymous","dateUpdated":"2021-02-28T16:20:38+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","colWidth":12,"editorHide":true,"fontSize":9,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h3>Ballot Leader Election</h3>\n<p>In this programming assignment you will have to complete the implementation of a special Leader Election Algorithm with monotonically increasing ballots.</p>\n<p>When you are done you simply have to export your notebook and then upload it in the &ldquo;Programming Exercise 1&rdquo; page.</p>\n<p><strong>Things to Remember</strong>:<br/>1. Basic components such as <code>PerfectLink</code> are already provided. No need to implement them.<br/>2. Execute the imports defined below <strong>before</strong> compiling your component implementations.<br/>3. We recommend making use of the component state and internal messages we have provided, if any, to complete the implementation logic.<br/>4. You can always print messages to the output log, from within handlers to see what happens during the simulation. e.g. <code>println(s&quot;Process $self delivers message $msg&quot;);</code><br/>5. Remember that during the simulation check you can print and observe the simulation time, i.e. with <code>System.currentTimeMillis()</code>.<br/>5. Do not forget to run the checker code block after each component implementation to ensure that all properties are satisfied <strong>before</strong> exporting and submitting the notebook.<br/>6. You can always restart the Kompics Interpreter to start fresh (Interpreter→KompicsInterpreter→Click Restart)</p>\n<p>Good luck! :)</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1614528332909_745671603","id":"20160927-134633_1462429338","dateCreated":"2021-02-28T16:05:32+0000","dateStarted":"2021-02-28T16:20:38+0000","dateFinished":"2021-02-28T16:20:39+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:377"},{"text":"\nimport se.kth.edx.id2203.core.ExercisePrimitives.AddressUtils._\nimport se.kth.edx.id2203.core.ExercisePrimitives.AddressUtils\nimport se.kth.edx.id2203.core.Ports._\nimport se.kth.edx.id2203.validation._\nimport se.kth.edx.id2203.validation.checkBallotLE\nimport se.sics.kompics.network._\nimport se.sics.kompics.sl._\nimport se.sics.kompics.timer.{ScheduleTimeout, Timeout, Timer}\nimport se.sics.kompics.{KompicsEvent, Start}\n\nimport scala.collection.mutable;\n","user":"anonymous","dateUpdated":"2021-02-28T16:20:38+0000","config":{"lineNumbers":false,"tableHide":false,"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala","colWidth":12,"fontSize":9,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"import se.kth.edx.id2203.core.ExercisePrimitives.AddressUtils._<br />import se.kth.edx.id2203.core.ExercisePrimitives.AddressUtils<br />import se.kth.edx.id2203.core.Ports._<br />import se.kth.edx.id2203.validation._<br />import se.kth.edx.id2203.validation.checkBallotLE<br />import se.sics.kompics.network._<br />import se.sics.kompics.sl._<br />import se.sics.kompics.timer.{ScheduleTimeout, Timeout, Timer}<br />import se.sics.kompics.{KompicsEvent, Start}<br />import scala.collection.mutable<br />"}]},"apps":[],"jobName":"paragraph_1614528332914_757598819","id":"20160830-154917_187608468","dateCreated":"2021-02-28T16:05:32+0000","dateStarted":"2021-02-28T16:20:39+0000","dateFinished":"2021-02-28T16:20:39+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:378"},{"text":"%md\n\n## Gossip-Based Ballot Leader Election ##\n\nA Ballot Leader Election Abstraction, in Kompics terms, is a simple component that **provides** the following port *(already imported in the notebook)*.\n\n    class BallotLeaderElection extends Port {\n        indication[BLE_Leader];\n    }\n  \n\nA **BallotLeaderElection** component should indicate to subscribers of its port that a new leader is elected (along with a ballot) with a `BLE_Leader` message that contains the address of the leader the ballot number (already provided):\n\n    case class BLE_Leader(leader: Address, ballot: Long) extends KompicsEvent;\n\nThe following properties define the expected behavior of a consensus abstraction more specifically:\n\n1. **Completeness**: *Eventually every correct process elects some correct process as long as a majority is correct*\n2. **Eventual Agreement**: *Eventually no two correct processes elect different correct processes.*\n3. **Monotonic Unique Ballots**: *Ballot numbers of consecutively elected processes should be unique and monotonically increasing.*\n    \nThe recommended algorithm to use is the the one we call \"Gossip Leader Election\" which elects the top process using a majority of gossiping messages.\nYou can find the algorithm in the following  <a href=\"https://courses.edx.org/asset-v1:KTHx+ID2203.2x+2016T4+type@asset+block@ble.pdf\" target=\"_blank\">document</a>.\n","user":"anonymous","dateUpdated":"2021-02-28T16:20:38+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","colWidth":12,"editorHide":true,"fontSize":9,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h2>Gossip-Based Ballot Leader Election</h2>\n<p>A Ballot Leader Election Abstraction, in Kompics terms, is a simple component that <strong>provides</strong> the following port <em>(already imported in the notebook)</em>.</p>\n<pre><code>class BallotLeaderElection extends Port {\n    indication[BLE_Leader];\n}\n</code></pre>\n<p>A <strong>BallotLeaderElection</strong> component should indicate to subscribers of its port that a new leader is elected (along with a ballot) with a <code>BLE_Leader</code> message that contains the address of the leader the ballot number (already provided):</p>\n<pre><code>case class BLE_Leader(leader: Address, ballot: Long) extends KompicsEvent;\n</code></pre>\n<p>The following properties define the expected behavior of a consensus abstraction more specifically:</p>\n<ol>\n  <li><strong>Completeness</strong>: <em>Eventually every correct process elects some correct process as long as a majority is correct</em></li>\n  <li><strong>Eventual Agreement</strong>: <em>Eventually no two correct processes elect different correct processes.</em></li>\n  <li><strong>Monotonic Unique Ballots</strong>: <em>Ballot numbers of consecutively elected processes should be unique and monotonically increasing.</em></li>\n</ol>\n<p>The recommended algorithm to use is the the one we call &ldquo;Gossip Leader Election&rdquo; which elects the top process using a majority of gossiping messages.<br/>You can find the algorithm in the following <a href=\"https://courses.edx.org/asset-v1:KTHx+ID2203.2x+2016T4+type@asset+block@ble.pdf\" target=\"_blank\">document</a>.</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1614528332916_755290326","id":"20160930-115754_781424547","dateCreated":"2021-02-28T16:05:32+0000","dateStarted":"2021-02-28T16:20:39+0000","dateFinished":"2021-02-28T16:20:39+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:379"},{"text":"\n//Provided Primitives to use in your implementation\n\n  case class CheckTimeout(timeout: ScheduleTimeout) extends Timeout(timeout);\n\n  case class HeartbeatReq(round: Long, highestBallot: Long) extends KompicsEvent;\n\n  case class HeartbeatResp(round: Long, ballot: Long) extends KompicsEvent;\n\n  private val ballotOne = 0x0100000000l;\n  \n  def ballotFromNAddress(n: Int, adr: Address): Long = {\n    val nBytes = com.google.common.primitives.Ints.toByteArray(n);\n    val addrBytes = com.google.common.primitives.Ints.toByteArray(adr.hashCode());\n    val bytes = nBytes ++ addrBytes;\n    val r = com.google.common.primitives.Longs.fromByteArray(bytes);\n    assert(r > 0); // should not produce negative numbers!\n    r\n  }\n\n  def incrementBallotBy(ballot: Long, inc: Int): Long = {\n    ballot + inc.toLong * ballotOne\n  }\n\n  private def incrementBallot(ballot: Long): Long = {\n    ballot + ballotOne\n  }","user":"anonymous","dateUpdated":"2021-02-28T16:20:38+0000","config":{"tableHide":false,"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala","colWidth":12,"fontSize":9,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"defined class CheckTimeout<br />defined class HeartbeatReq<br />defined class HeartbeatResp<br />ballotFromNAddress: (n: Int, adr: se.sics.kompics.network.Address)Long<br />incrementBallotBy: (ballot: Long, inc: Int)Long<br />"}]},"apps":[],"jobName":"paragraph_1614528332917_754905577","id":"20160830-154940_1300846994","dateCreated":"2021-02-28T16:05:32+0000","dateStarted":"2021-02-28T16:20:39+0000","dateFinished":"2021-02-28T16:20:39+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:380"},{"text":"\nclass GossipLeaderElection(init: Init[GossipLeaderElection]) extends ComponentDefinition {\n    \n     private val ballotOne = 0x0100000000l;\n  \n  def ballotFromNAddress(n: Int, adr: Address): Long = {\n    val nBytes = com.google.common.primitives.Ints.toByteArray(n);\n    val addrBytes = com.google.common.primitives.Ints.toByteArray(adr.hashCode());\n    val bytes = nBytes ++ addrBytes;\n    val r = com.google.common.primitives.Longs.fromByteArray(bytes);\n    assert(r > 0); // should not produce negative numbers!\n    r\n  }\n\n  def incrementBallotBy(ballot: Long, inc: Int): Long = {\n    ballot + inc.toLong * ballotOne\n  }\n\n  private def incrementBallot(ballot: Long): Long = {\n    ballot + ballotOne\n  }\n\n  val ble = provides[BallotLeaderElection];\n  val pl = requires[PerfectLink];\n  val timer = requires[Timer];\n\n  val self = init match {\n    case Init(s: Address) => s\n  }\n  val topology = cfg.getValue[List[Address]](\"ble.simulation.topology\");\n  val delta = cfg.getValue[Long](\"ble.simulation.delay\"); // delay\n  val majority = (topology.size / 2) + 1;\n\n  private var period = cfg.getValue[Long](\"ble.simulation.delay\"); // delay\n  private val ballots = mutable.Map.empty[Address, Long];\n\n  private var round = 0l;\n  private var ballot = ballotFromNAddress(0, self);\n\n  private var leader: Option[(Long, Address)] = None;\n  private var highestBallot: Long = ballot; //ballot_max\n\n  private def startTimer(delay: Long): Unit = {\n    val scheduledTimeout = new ScheduleTimeout(period);\n    scheduledTimeout.setTimeoutEvent(CheckTimeout(scheduledTimeout));\n    trigger(scheduledTimeout -> timer);\n  } // STARTTIMER(delay)\n\n\n    // topBallot := topProcess._1\n    // topProcess := topProcess._2\n    // leader: Option[(Long, Address)]\n    // ballots = mutable.Map.empty[Address, Long]\n    // ballot -> Long, self -> Address\n  private def makeLeader(topProcess: (Long, Address)) {\n      if(topProcess._1 < highestBallot){\n          while(ballot <= highestBallot){\n              ballot = incrementBallot(ballot);\n          }\n          leader = None;\n      }\n      else{\n          if (Some(topProcess) != leader){\n              highestBallot = topProcess._1;\n              leader = Some(topProcess);\n              // trigger <ble, Leader | topProcess, topBallot>\n              trigger(BLE_Leader(topProcess._2, topProcess._1) -> ble);\n          }\n      }\n  }\n\n  private def checkLeader() {\n      ballots += ((self, ballot));\n      makeLeader(ballots.maxBy(_._2)._2, ballots.maxBy(_._2)._1);\n  }\n\n  ctrl uponEvent {\n    case _: Start =>  {\n      startTimer(period);\n    }\n  }\n\n  timer uponEvent {\n    case CheckTimeout(_) => {\n        if (ballots.size + 1 >= majority){\n            checkLeader();\n        }\n        // ballots = mutable.Map.empty[Address, Long];\n        ballots.empty;\n        round += 1;\n        for (p <- topology){\n            if (p != self){\n                // trigger <pp2p, Send | p, [HEARTBEATREQUEST, round, ballot_max]>\n                // case class HeartbeatReq(round: Long, highestBallot: Long) extends KompicsEvent;\n                trigger(PL_Send(p, HeartbeatReq(round, highestBallot)) -> pl);\n            }\n        }\n        startTimer(period);\n    }\n  }\n\n  pl uponEvent {\n      \n    // upon event <pp2p, Deliver | p, [HEARTBEATREQUEST, r, bmax]> do\n    // case class HeartbeatReq(round: Long, highestBallot: Long) extends KompicsEvent;\n    case PL_Deliver(src, HeartbeatReq(r, hb)) => {\n        if (hb > highestBallot){\n            highestBallot = hb;\n        }\n        // trigger <pp2p, Send | p, [HEARTBEATREPLY, r, ballot]>\n        // case class HeartbeatResp(round: Long, ballot: Long) extends KompicsEvent;\n        trigger(PL_Send(src, HeartbeatResp(round, ballot)) -> pl);\n    }\n    \n    // upon event <pp2p, Deliver | p, [HEARTBEATREPLY, r, b]> do\n    case PL_Deliver(src, HeartbeatResp(r, b)) => {\n        if (r == round){\n            ballots += ((src, b));\n        }\n        else{\n            period += delta;\n        }\n    }\n  }\n}","user":"anonymous","dateUpdated":"2021-02-28T16:20:38+0000","config":{"lineNumbers":true,"tableHide":false,"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala","colWidth":12,"fontSize":9,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"defined class GossipLeaderElection<br />"}]},"apps":[],"jobName":"paragraph_1614528332918_756059824","id":"20160830-154952_592749615","dateCreated":"2021-02-28T16:05:32+0000","dateStarted":"2021-02-28T16:20:39+0000","dateFinished":"2021-02-28T16:20:40+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:381"},{"text":"checkBallotLE[GossipLeaderElection]();","user":"anonymous","dateUpdated":"2021-02-28T16:20:38+0000","config":{"tableHide":false,"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala","colWidth":12,"fontSize":9,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<br />Your submission has been locally simulated and validated.<br /><br /><a href=\"\\static\\log.txt\" target=\"_blank\">Click Here</a> to view the output of the simulation.<br /><style type=\"text/css\">.tg  {border-collapse:collapse;border-spacing:0;border-color:#aabcfe;}.tg td{font-family:Arial, sans-serif;font-size:14px;padding:10px 5px;border-style:solid;border-width:1px;overflow:hidden;word-break:normal;border-color:#aabcfe;color:#669;background-color:#e8edff;}.tg th{font-family:Arial, sans-serif;font-size:14px;font-weight:normal;padding:10px 5px;border-style:solid;border-width:1px;overflow:hidden;word-break:normal;border-color:#aabcfe;color:#039;background-color:#b9c9fe;}.tg .tg-mb3i{background-color:#D2E4FC;text-align:right;vertical-align:top}.tg .tg-lqy6{text-align:right;vertical-align:top}.tg .tg-vlnx{background-color:#3071a9;color:#ffffff;text-align:center;vertical-align:top}.tg .tg-6k2t{background-color:#D2E4FC;vertical-align:top}.tg tg-6k2l{background-color:#ffb3b3;vertical-align:top}.tg .tg-yw4l{vertical-align:top}</style><table class=\"tg\">  <tr>    <th class=\"tg-vlnx\" colspan=\"3\">Correction Results</th>  </tr><br /><tr>    <td class=\"tg-6k2t\">PASSED</td> <td class=\"tg-6k2t\">Completeness</td> <td class=\"tg-6k2t\">✔: Eventually every correct process elects some correct process as long as a majority is correct<br></td>  </tr>  <br /><tr>    <td class=\"tg-6k2t\">PASSED</td> <td class=\"tg-6k2t\">Eventual Agreement</td> <td class=\"tg-6k2t\">✔: Eventually no two correct processes elect different correct processes<br></td>  </tr>  <br /><tr>    <td class=\"tg-6k2t\">PASSED</td> <td class=\"tg-6k2t\">Monotonic Unique Ballots</td> <td class=\"tg-6k2t\">✔: Ballot numbers of consecutively elected processes should be unique and monotonically increasing<br></td>  </tr>  <br /></table><br />Final Comments<br />**************<br />Congratulations! Your implementation of the 'Ballot Leader Election' satisfies all properties! <br />A unique token has been generated for your submission right below. Please do not edit. <br /><br />{\"gradingToken\":[45,45,45,45,45,66,69,71,73,78,32,80,71,80,32,77,69,83,83,65,71,69,45,45,45,45,45,10,86,101,114,115,105,111,110,58,32,66,67,80,71,32,118,49,46,53,53,10,10,104,81,73,77,65,57,79,116,77,118,84,69,98,74,49,102,65,81,47,47,86,53,74,79,112,84,77,69,88,74,107,65,77,113,108,77,89,56,75,122,71,55,76,67,79,55,85,75,107,100,79,112,109,70,108,82,51,110,88,73,74,67,111,65,10,67,105,70,77,78,72,86,114,112,49,98,76,89,56,117,102,119,86,73,47,110,71,84,112,43,100,79,43,66,116,85,65,121,74,51,72,87,106,55,121,79,83,65,66,47,113,118,55,87,77,105,109,114,113,101,103,68,100,109,104,76,104,56,100,10,89,72,117,48,89,74,56,105,89,120,52,51,105,43,66,86,117,76,67,83,107,118,83,111,104,87,106,55,117,43,117,120,122,112,99,73,52,69,71,122,107,112,115,121,75,105,77,51,65,84,81,86,118,102,79,122,57,113,50,88,112,105,112,106,10,106,66,116,98,52,57,103,80,121,85,50,120,119,100,79,108,53,117,103,52,121,107,103,68,78,52,116,84,80,80,68,82,89,49,84,100,102,103,97,104,78,43,97,103,105,111,81,57,116,65,89,69,104,101,47,77,80,102,74,118,83,71,117,117,10,73,73,89,53,72,86,106,74,115,110,114,104,122,84,117,100,113,102,88,109,73,73,50,106,67,103,80,53,56,72,43,47,74,55,57,109,100,83,98,70,49,79,107,74,77,81,105,110,67,54,49,79,57,81,121,70,122,120,55,108,115,48,89,51,10,105,97,49,48,113,104,104,90,85,78,55,100,109,117,85,69,113,111,103,50,106,113,120,84,47,72,65,81,111,52,104,99,53,83,66,56,103,55,87,115,53,115,49,89,82,55,47,82,86,49,78,111,74,51,105,81,73,76,99,115,117,114,119,121,10,112,71,122,43,66,84,115,83,87,102,80,67,72,121,120,99,111,80,51,71,57,53,101,53,51,115,112,82,100,80,83,97,86,107,47,77,119,114,108,98,54,48,56,66,106,53,89,78,79,69,72,76,120,120,54,50,97,66,80,88,56,75,49,115,10,79,117,111,85,55,68,47,43,65,115,82,65,107,69,73,111,85,98,105,83,113,112,111,72,49,67,70,113,51,79,71,121,54,73,102,99,89,116,47,47,106,47,66,74,102,107,73,71,79,112,50,97,99,104,107,113,120,101,111,110,67,90,106,102,10,74,107,52,68,50,76,109,81,86,120,100,51,100,119,121,78,98,117,99,43,65,116,53,108,115,121,47,49,55,83,77,75,109,80,103,108,43,81,75,70,100,76,54,57,67,69,90,87,89,78,50,66,119,107,48,77,50,77,54,86,113,121,84,97,10,116,65,70,111,70,69,110,113,114,120,47,84,88,115,121,74,112,73,48,78,72,49,97,82,111,87,50,99,43,55,69,52,77,101,43,102,78,89,50,112,119,109,98,90,49,99,67,117,75,86,76,110,89,65,49,108,54,82,90,54,110,85,105,119,10,69,56,99,68,65,113,52,113,71,75,113,50,81,52,75,100,66,71,51,122,118,50,102,89,105,99,104,52,55,112,120,121,48,86,118,110,105,109,74,88,43,54,89,68,76,43,57,110,86,115,114,43,115,70,71,85,52,97,81,49,70,85,80,83,10,119,68,111,66,54,105,85,101,52,106,65,117,113,105,103,57,56,111,83,82,72,86,107,110,67,52,116,121,106,101,113,54,84,80,116,115,66,78,104,101,81,117,72,47,55,110,43,115,86,80,101,85,70,106,52,99,81,71,87,53,66,51,70,117,10,84,101,84,114,56,103,54,47,102,57,82,107,88,51,66,113,108,80,89,73,68,48,70,111,82,74,47,105,118,84,48,57,80,87,103,76,51,115,75,75,83,76,105,121,118,100,81,72,56,70,66,107,65,115,99,99,57,69,48,100,86,82,109,54,10,106,81,122,77,70,70,103,80,49,105,56,110,48,112,72,118,54,87,67,84,101,83,86,48,55,57,117,82,76,100,110,83,88,106,73,74,105,81,82,89,79,65,77,108,88,71,86,99,47,102,103,68,49,110,53,88,54,56,53,65,86,68,70,117,10,48,72,79,106,112,74,116,67,122,84,47,43,79,99,71,101,112,103,108,54,115,74,110,76,99,109,88,101,97,110,83,112,54,74,76,82,79,105,48,89,54,56,71,68,54,112,70,101,56,119,116,51,103,79,49,109,71,82,53,82,77,117,53,66,10,106,74,113,43,104,88,70,52,98,74,108,120,89,122,114,81,54,47,102,102,112,104,105,85,75,87,76,122,52,106,57,51,99,83,99,74,119,81,119,100,75,111,87,111,47,51,48,49,81,51,47,107,116,53,87,65,86,110,106,78,86,67,97,99,10,50,74,69,87,75,83,101,88,110,53,121,79,103,88,80,110,10,61,118,75,70,90,10,45,45,45,45,45,69,78,68,32,80,71,80,32,77,69,83,83,65,71,69,45,45,45,45,45,10]}<br />res4: Boolean = true<br />"}]},"apps":[],"jobName":"paragraph_1614528332918_756059824","id":"20160830-155009_392534435","dateCreated":"2021-02-28T16:05:32+0000","dateStarted":"2021-02-28T16:20:40+0000","dateFinished":"2021-02-28T16:20:43+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:382"},{"user":"anonymous","dateUpdated":"2021-02-28T16:11:06+0000","config":{"tableHide":false,"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala","colWidth":12,"fontSize":9,"results":[],"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1614528332919_755675075","id":"20160830-155043_337959288","dateCreated":"2021-02-28T16:05:32+0000","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:383"}],"name":"Exercise-Ballot Leader Election","id":"2G2CZ1R3B","angularObjects":{"2BKQCVH92:shared_process":[],"2CVXXPNWV:shared_process":[]},"config":{"looknfeel":"default","personalizedMode":"false"},"info":{}}