{"paragraphs":[{"text":"%md\n# Conway's Game of Life\nThe purpose of this task is to run a version of [Conway's Game of Life](https://en.wikipedia.org/wiki/Conway%27s_Game_of_Life) using Kompics component for each cell.\n\nAll the Kompics relevant code is already implemented for you, however, and you only need to fill in the following 4 rules:\n1. Any live cell with fewer than two live neighbours dies, as if caused by under-population.\n2. Any live cell with two or three live neighbours lives on to the next generation.\n3. Any live cell with more than three live neighbours dies, as if by over-population.\n4. Any dead cell with exactly three live neighbours becomes a live cell, as if by reproduction.\n \nImplement these rules at the marked position in the code below.\n\nNote that while this is a graded assignment, there are no tests and the assignment always passes automatically.\nThe purpose is merely for you to experiment with the zeppelin environment and familiarise yourself with the assignment submission procedure.\n\nOnce you have the basic version working, feel free to experiment with different initial state generators, and numbers of generations.\n\nSimply submit the assignment whenever you feel ready.\n","dateUpdated":"2020-01-03T17:14:27+0000","config":{"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"fontSize":9,"editorSetting":{}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h1>Conway&rsquo;s Game of Life</h1>\n<p>The purpose of this task is to run a version of <a href=\"https://en.wikipedia.org/wiki/Conway%27s_Game_of_Life\">Conway&rsquo;s Game of Life</a> using Kompics component for each cell.</p>\n<p>All the Kompics relevant code is already implemented for you, however, and you only need to fill in the following 4 rules:<br/>1. Any live cell with fewer than two live neighbours dies, as if caused by under-population.<br/>2. Any live cell with two or three live neighbours lives on to the next generation.<br/>3. Any live cell with more than three live neighbours dies, as if by over-population.<br/>4. Any dead cell with exactly three live neighbours becomes a live cell, as if by reproduction.</p>\n<p>Implement these rules at the marked position in the code below.</p>\n<p>Note that while this is a graded assignment, there are no tests and the assignment always passes automatically.<br/>The purpose is merely for you to experiment with the zeppelin environment and familiarise yourself with the assignment submission procedure.</p>\n<p>Once you have the basic version working, feel free to experiment with different initial state generators, and numbers of generations.</p>\n<p>Simply submit the assignment whenever you feel ready.</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1578071634906_-1598326829","id":"20160902-193003_1338549382","dateCreated":"2020-01-03T17:13:54+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:1593","user":"anonymous","dateFinished":"2020-01-03T17:14:27+0000","dateStarted":"2020-01-03T17:14:27+0000"},{"text":"import se.kth.edx.id2203.tutorial.gameoflife._\nimport se.kth.edx.id2203.validation._\nimport se.kth.edx.id2203.core._\nimport java.util.Random;\nimport se.sics.kompics.sl._\nimport se.sics.kompics.{ Kompics }\n\ncase class CellCInit(x: Int, y: Int, init: State.Initializer) extends se.sics.kompics.Init[Cell]\n\nclass CellC(init: CellCInit) extends Cell { // class Cell is a KompicsComponent\n    // this cell's location in the grid\n    val xPos = init.x;\n    val yPos = init.y;\n    // get the initial state from the State.Initializer (see below this class)\n    private var state: State = init.init.apply(xPos, yPos);\n    // initialize our view of our neighbours\n    private val view = scala.collection.mutable.Map.empty[Tuple2[Int, Int], State];\n    // keep track of the generation we are currently communicating on to not mix up delayed messages\n    private var lastGen = -1l;\n\n    // declare our ports (the same one but in both directions for broadcasting to neighbours and receiving their broadcasts)\n    val envIn = requires(EnvironmentPort);\n    val envOut = provides(EnvironmentPort);\n    // handle messages on incoming environment port\n    envIn uponEvent {\n        case Progress(generation) => {\n            //println(s\"Cell($xPos, $yPos) starting generation $generation as $state\"); // uncomment if you want to see some printouts\n            // for every generaton broadcast our current state\n            trigger(BroadcastState(generation, xPos, yPos, state) -> envOut);\n            // and prepare to receiver other's states\n            if (lastGen < generation) {\n                view.clear();\n                lastGen = generation;\n            }\n        }\n        case BroadcastState(generation, x, y, otherState) => {\n            // same as above, just in case we get another component's state broadcast before the instruction to move to the next generation\n            if (lastGen < generation) {\n                view.clear();\n                lastGen = generation;\n            }\n            // add the received state to our view\n            view += ((x -> y) -> otherState);\n            //println(s\"Cell($xPos, $yPos) got state $otherState from Cell($x, $y) leading to: $view\");  // uncomment if you want to see some printouts\n            if (view.size == 8) { // once we get the last state broadcast in a generation (from everyone around us: 3x3-1)\n                // count live cells in our neighbourhood\n                val liveC = view.values.count {\n                    case Alive => true\n                    case _     => false\n                };\n                // apply game of life rules to decide our next state based on current state and live count\n                // **********************************\n                // ******* STUDENT CODE HERE ********\n                // **********************************\n            }\n        }\n    }\n}\n\n\nval rand = new Random(System.currentTimeMillis());\n// randomly generate the initial state (easy but boring...try to do something more interesting if you like)\nval defaultInit: State.Initializer = (x: Int, y: Int) => {\n    if (rand.nextBoolean()) {\n        Alive\n    } else {\n        Dead\n    }\n}\n// just a way to generate a child init object from a method\nval toCellCInit: Cell.Initializer = {\n    case (x: Int, y: Int, init: State.Initializer) => CellCInit(x, y, init).asInstanceOf[se.sics.kompics.Init[Cell]]\n};\n\nval cellclass = classOf[CellC].asInstanceOf[Class[Cell]] // nvm some ugly type magic...Java Kompics is sometimes a bit overspecific on what types it wants\nrunKompics[ParentC](GameOfLifeInit(defaultInit, cellclass, toCellCInit, numGenerations = 10)); // create the Kompics environment and wait for it to finish\n\ncheckExample[ParentC] // generate grading token\n    \n    ","dateUpdated":"2020-01-03T17:14:27+0000","config":{"editorMode":"ace/mode/scala","colWidth":12,"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"fontSize":9,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1578071634907_-1598711578","id":"20160615-191351_1691822922","dateCreated":"2020-01-03T17:13:54+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:1594","user":"anonymous","dateFinished":"2020-01-03T17:14:29+0000","dateStarted":"2020-01-03T17:14:27+0000","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"Starting generation 0...<br />Completed generation 0<br />Starting generation 1<br />Completed generation 1<br />Starting generation 2<br />Completed generation 2<br />Starting generation 3<br />Completed generation 3<br />Starting generation 4<br />Completed generation 4<br />Starting generation 5<br />Completed generation 5<br />Starting generation 6<br />Completed generation 6<br />Starting generation 7<br />Completed generation 7<br />Starting generation 8<br />Completed generation 8<br />Starting generation 9<br />Completed generation 9<br />Starting generation 10<br />Completed generation 10<br />Finishing up.<br /><p><b>To see the generated output click </b><a href=\"static/goltest.html\" target=\"_blank\">here</a></p><br /><br />Your submission has been locally simulated and validated.<br /><br /><a href=\"\\static\\log.txt\" target=\"_blank\">Click Here</a> to view the output of the simulation.<br /><style type=\"text/css\">.tg  {border-collapse:collapse;border-spacing:0;border-color:#aabcfe;}.tg td{font-family:Arial, sans-serif;font-size:14px;padding:10px 5px;border-style:solid;border-width:1px;overflow:hidden;word-break:normal;border-color:#aabcfe;color:#669;background-color:#e8edff;}.tg th{font-family:Arial, sans-serif;font-size:14px;font-weight:normal;padding:10px 5px;border-style:solid;border-width:1px;overflow:hidden;word-break:normal;border-color:#aabcfe;color:#039;background-color:#b9c9fe;}.tg .tg-mb3i{background-color:#D2E4FC;text-align:right;vertical-align:top}.tg .tg-lqy6{text-align:right;vertical-align:top}.tg .tg-vlnx{background-color:#3071a9;color:#ffffff;text-align:center;vertical-align:top}.tg .tg-6k2t{background-color:#D2E4FC;vertical-align:top}.tg tg-6k2l{background-color:#ffb3b3;vertical-align:top}.tg .tg-yw4l{vertical-align:top}</style><table class=\"tg\">  <tr>    <th class=\"tg-vlnx\" colspan=\"3\">Correction Results</th>  </tr><br /><tr>    <td class=\"tg-6k2t\">PASSED</td> <td class=\"tg-6k2t\">Example Run</td> <td class=\"tg-6k2t\">✔: You have run the example successfully!<br></td>  </tr>  <br /></table><br />Final Comments<br />**************<br />Congratulations! Your implementation of the 'Game of Life' satisfies all properties! <br />A unique token has been generated for your submission right below. Please do not edit. <br /><br />{\"gradingToken\":[45,45,45,45,45,66,69,71,73,78,32,80,71,80,32,77,69,83,83,65,71,69,45,45,45,45,45,10,86,101,114,115,105,111,110,58,32,66,67,80,71,32,118,49,46,53,53,10,10,104,81,73,77,65,57,79,116,77,118,84,69,98,74,49,102,65,82,65,65,103,75,100,78,111,122,106,74,65,55,109,56,106,56,81,99,57,116,112,115,111,114,65,116,48,53,65,103,122,85,81,71,55,107,72,76,72,85,120,75,76,51,105,73,10,114,113,83,90,104,73,107,102,89,106,68,69,120,84,119,116,43,109,74,100,79,53,113,87,108,70,86,47,115,73,119,118,80,81,81,111,108,57,82,90,107,122,74,78,81,109,122,86,110,85,115,102,103,89,102,121,86,77,80,71,54,77,105,51,10,55,53,48,105,73,56,87,112,70,50,113,72,69,97,71,52,103,110,70,54,68,105,50,110,72,55,122,111,118,112,97,56,110,55,73,121,111,68,75,97,74,53,57,107,82,112,71,54,97,98,121,119,71,113,73,108,72,118,87,88,71,116,106,103,10,69,83,101,116,72,70,52,113,110,71,53,89,98,116,112,105,74,52,106,52,108,101,110,72,112,43,97,79,69,122,57,51,49,56,47,66,104,87,43,77,76,80,53,55,74,112,107,77,107,57,117,120,50,106,72,74,70,43,56,84,71,49,71,89,10,112,76,56,76,89,103,121,48,49,85,68,50,111,102,70,113,111,81,85,50,57,84,115,54,53,110,78,48,50,116,70,54,69,121,76,100,121,105,105,52,102,85,108,56,54,111,50,54,67,74,50,66,106,48,68,100,71,99,114,108,110,109,76,105,10,90,104,111,69,104,79,120,119,115,97,114,99,102,88,87,111,48,47,67,90,90,86,109,53,97,117,77,113,98,77,69,69,121,109,53,49,72,73,81,66,121,72,108,51,106,43,81,118,84,55,104,119,67,107,80,50,52,120,54,103,83,67,68,102,10,65,110,90,106,54,98,85,77,98,71,106,121,120,102,86,78,76,116,80,49,68,101,55,80,79,98,79,116,89,101,65,66,67,117,106,56,57,108,107,99,52,105,80,55,65,101,106,80,118,116,114,72,85,97,113,65,68,87,110,49,108,81,102,82,10,69,55,101,119,82,110,90,50,112,75,69,56,54,117,90,85,103,51,110,121,118,79,88,55,55,80,101,99,85,68,43,112,81,89,121,99,52,74,52,83,48,100,85,75,82,74,79,84,110,88,100,107,55,53,72,118,84,67,48,114,111,90,112,77,10,110,97,43,111,72,79,79,50,105,56,81,107,52,78,81,118,51,120,70,82,56,121,100,69,107,55,89,113,56,71,106,57,78,54,97,78,111,56,108,81,55,115,87,73,104,79,72,81,106,47,116,76,72,53,103,104,56,88,88,103,97,90,104,52,10,122,97,51,102,116,67,100,84,66,57,72,65,65,97,66,71,107,103,70,102,90,97,104,109,103,55,104,65,83,47,54,111,90,80,72,78,71,87,70,43,57,110,116,74,84,52,99,53,88,51,116,78,70,68,82,102,122,43,87,112,109,50,73,72,10,55,119,103,83,43,98,102,81,43,117,88,74,53,113,104,72,115,114,110,56,68,115,121,78,110,81,103,99,109,102,82,49,71,85,100,100,85,43,113,47,84,99,76,104,118,104,48,79,89,99,100,50,66,69,107,106,103,88,111,113,97,84,88,83,10,108,103,70,67,120,113,43,72,70,111,49,111,55,68,106,72,70,113,89,78,110,49,53,56,99,53,103,90,98,100,109,68,120,52,87,109,69,87,107,98,77,67,47,66,56,116,120,78,90,67,55,85,112,73,87,73,116,86,48,65,114,65,56,73,10,70,80,99,77,104,121,109,112,86,106,74,84,87,56,115,114,109,66,57,116,57,83,98,97,57,54,112,88,79,86,53,83,112,52,65,50,80,86,111,87,104,55,56,121,68,97,86,109,74,85,105,57,75,78,75,85,109,54,49,108,115,81,80,112,10,112,108,53,107,116,43,72,121,86,69,109,66,88,57,79,121,75,90,49,116,72,83,48,54,48,100,110,84,109,47,54,108,85,88,105,115,75,102,76,73,57,118,115,102,56,75,85,49,83,47,104,65,105,88,101,76,54,71,85,57,103,75,88,72,10,69,119,82,48,82,122,117,105,113,103,61,61,10,61,97,86,84,47,10,45,45,45,45,45,69,78,68,32,80,71,80,32,77,69,83,83,65,71,69,45,45,45,45,45,10]}<br />import se.kth.edx.id2203.tutorial.gameoflife._<br />import se.kth.edx.id2203.validation._<br />import se.kth.edx.id2203.core._<br />import java.util.Random<br />import se.sics.kompics.sl._<br />import se.sics.kompics.Kompics<br />defined class CellCInit<br />defined class CellC<br />rand: java.util.Random = java.util.Random@5531079a<br />defaultInit: se.kth.edx.id2203.tutorial.gameoflife.State.Initializer = $$Lambda$1616/2043594341@5d2e8bc4<br />toCellCInit: se.kth.edx.id2203.tutorial.gameoflife.Cell.Initializer = $$Lambda$1617/1217558040@2b460b9d<br />cellclass: Class[se.kth.edx.id2203.tutorial.gameoflife.Cell] = class CellC<br />res2: Boolean = true<br />"}]}},{"dateUpdated":"2020-01-03T17:14:27+0000","config":{"editorMode":"ace/mode/scala","colWidth":12,"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"fontSize":9,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1578071634908_-1600635322","id":"20160615-191928_480262104","dateCreated":"2020-01-03T17:13:54+0000","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:1595","user":"anonymous"}],"name":"Example - Game of Life","id":"2EW37CTC7","angularObjects":{"2BKQCVH92:shared_process":[],"2CVXXPNWV:shared_process":[]},"config":{"looknfeel":"default","personalizedMode":"false"},"info":{}}